{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/code/","title":"Code","text":""},{"location":"contributing/code/#pre-requisites","title":"Pre-requisites","text":"<p>You will need to have the following installed:</p> <ul> <li>Nix</li> <li>Direnv</li> </ul> <p>Important</p> <p>We use a Flake-based workflow. You can certainly develop for <code>nixos-facter</code> without Flakes and leverage much of what is listed below, but it is left up to the reader to determine how to make that work.</p>"},{"location":"contributing/code/#formatting","title":"Formatting","text":"<p>We use treefmt and treefmt-nix to format the repository by running <code>nix fmt</code> from the root directory.</p> nix/formatter.nix<pre><code>{ pkgs, inputs, ... }:\nlet\n  hasNixFmt = pkgs.lib.meta.availableOn pkgs.stdenv.buildPlatform pkgs.nixfmt-rfc-style.compiler;\nin\ninputs.treefmt-nix.lib.mkWrapper pkgs {\n  projectRootFile = \".git/config\";\n\n  programs = {\n    nixfmt.enable = hasNixFmt;\n    nixfmt.package = pkgs.nixfmt-rfc-style;\n\n    deadnix.enable = true;\n    prettier.enable = true;\n    statix.enable = true;\n  };\n\n  settings = {\n    global.excludes = [\n      \"LICENSE\"\n      # unsupported extensions\n      \"*.{gif,png,svg,tape,mts,lock,mod,sum,toml,env,envrc,gitignore}\"\n    ];\n\n    formatter = {\n      deadnix = {\n        priority = 1;\n      };\n\n      statix = {\n        priority = 2;\n      };\n\n      nixfmt = pkgs.lib.mkIf hasNixFmt { priority = 3; };\n\n      prettier = {\n        options = [\n          \"--tab-width\"\n          \"4\"\n        ];\n        includes = [ \"*.{css,html,js,json,jsx,md,mdx,scss,ts,yaml}\" ];\n      };\n    };\n  };\n}\n</code></pre>"},{"location":"contributing/code/#checks","title":"Checks","text":"<p>Running <code>nix flake check</code> will build all the devshells and Nix packages, as well as check the formatting with treefmt and any other Flake checks that have been configured.</p>"},{"location":"contributing/code/#documentation","title":"Documentation","text":"<p>When making changes, it is important to add or update any relevant sections in the documentation within the same pull request.</p> <p>For more information see the next section.</p>"},{"location":"contributing/docs/","title":"Documentation","text":"<p>There is a separate devshell called <code>docs</code> which is provided for working with the docs locally.</p> <p>It can be entered by running: <code>nix develop .#docs</code></p> nix/devshells/docs.nix<pre><code>{\n  pkgs,\n  ...\n}:\npkgs.mkShellNoCC {\n  packages =\n    let\n      inherit (pkgs) lib;\n\n      # Capture root so we can identify our store paths below\n      root = toString ./.;\n\n      snakeCase = with lib; replaceStrings upperChars (map (s: \"_\" + s) lowerChars);\n\n      # Eval Facter module\n      eval = lib.evalModules {\n        modules = [\n          # Load the root module\n          ./modules/nixos/facter.nix\n          {\n            # Disable checks so it doesn't complain about NixOS related options which aren't available\n            config._module.check = false;\n            # Use the basic vm's report\n            config.facter.reportPath = ./hosts/basic/report.json;\n          }\n        ];\n      };\n\n      # Convert `/nix/store/...` store paths in the option declarations into a repository link.\n      # NOTE: we point at the main branch, but for versioned docs this will be incorrect.\n      # It's still a good starting point though.\n      transformDeclaration =\n        decl:\n        let\n          declStr = toString decl;\n          subpath = lib.removePrefix \"/\" (lib.removePrefix root declStr);\n        in\n        assert lib.hasPrefix root declStr;\n        {\n          url = \"https://github.com/numtide/nixos-facter-modules/blob/main/${subpath}\";\n          name = subpath;\n        };\n\n      # Convert options into options doc, transforming declaration paths to point to the github repository.\n      nixosOptionsDoc =\n        _name: options:\n        pkgs.nixosOptionsDoc {\n          inherit options;\n          transformOptions =\n            opt:\n            opt\n            // {\n              declarations = map transformDeclaration opt.declarations;\n            };\n        };\n\n      # Take an options attr set and produce a markdown file.\n      mkMarkdown =\n        name: options:\n        let\n          optionsDoc = nixosOptionsDoc name options;\n        in\n        pkgs.runCommand \"${name}-markdown\" { } ''\n          mkdir $out\n          cat ${optionsDoc.optionsCommonMark} &gt; $out/${snakeCase name}.md\n        '';\n\n      # Allows us to gather all options that are immediate children of `facter` and which have no child options.\n      # e.g. facter.reportPath, facter.report.\n      # For all other options we group them by the first immediate child of `facter`.\n      # e.g. facter.bluetooth, facter.boot and so on.\n      # This allows us to have a page for root facter options \"facter.md\", and a page each for the major sub modules.\n      facterOptionsFilter =\n        _:\n        {\n          loc ? [ ],\n          options ? [ ],\n          ...\n        }:\n        (lib.length loc) == 2 &amp;&amp; ((lib.elemAt loc 0) == \"facter\") &amp;&amp; (lib.length options) == 0;\n\n      otherOptionsFilter = n: v: !(facterOptionsFilter n v);\n\n      facterMarkdown = mkMarkdown \"facter\" (lib.filterAttrs facterOptionsFilter eval.options.facter);\n      otherMarkdown = lib.mapAttrsToList mkMarkdown (\n        lib.filterAttrs otherOptionsFilter eval.options.facter\n      );\n\n      optionsMarkdown = pkgs.symlinkJoin {\n        name = \"facter-module-markdown\";\n        paths = [ facterMarkdown ] ++ otherMarkdown;\n      };\n\n    in\n    with pkgs;\n    [\n      (pkgs.writeScriptBin \"mkdocs\" ''\n        # rsync in NixOS modules doc to avoid issues with symlinks being owned by root\n        rsync -aL --chmod=u+rw --delete-before ${optionsMarkdown}/ ./docs/content/reference/nixos_modules\n\n        # execute the underlying command\n        ${pkgs.mkdocs}/bin/mkdocs \"$@\"\n      '')\n    ]\n    ++ (with pkgs.python3Packages; [\n      mike\n      mkdocs-material\n    ]);\n}\n</code></pre> <p>The docs are based on MkDocs and the MkDocs Material theme. You will find its configuration and content in the following locations:</p> <ul> <li><code>mkdocs.yaml</code></li> <li><code>./docs</code></li> </ul>"},{"location":"contributing/docs/#serve-locally","title":"Serve locally","text":"<p>To serve the docs locally run <code>mkdocs serve</code> from the root of the repository:</p> <pre><code>\u276f mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nWARNING -  The following pages exist in the docs directory, but are not included in the \"nav\" configuration:\n             - index.md\nINFO    -  Documentation built in 0.26 seconds\nINFO    -  [16:22:36] Watching paths for changes: 'docs/content', 'mkdocs.yml'\nINFO    -  [16:22:36] Serving on http://127.0.0.1:8000/nixos-facter/\n</code></pre>"},{"location":"contributing/docs/#versioning-publication","title":"Versioning &amp; Publication","text":"<p>Versioning of the docs is managed through mike.</p> <p>It is responsible for managing the structure of the <code>gh-pages</code> branch in the repository, which Github Pages is configured to serve from.</p> <p>Note</p> <p>More information about versioning with MkDocs Material and mike can be found here.</p> <p>There is a github workflow, <code>.github/workflows/gh-pages.yml</code> which is responsible for publishing the docs. It does the following:</p> <ul> <li>On merge to <code>main</code>, the docs version main is updated.</li> <li>When a new tag is created of the form <code>v.&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> a docs version <code>v&lt;major&gt;.&lt;minor&gt;</code> is created and the     latest alias is updated to point to this.</li> </ul> <p>The idea is that users will land on the latest released version of the docs by default, with <code>main</code> being available if they wish to read about unreleased features and changes.</p> <p>To preview the versions locally you can use <code>mike serve</code> instead of <code>mkdocs serve</code>.</p> <p>Warning</p> <p>Be sure to have fetched the latest changes for the <code>gh-pages</code> branch first. This is especially important if you are using <code>mike</code> locally to make manual changes to the published site.</p>"},{"location":"getting-started/generate-report/","title":"Generate a report","text":"<p>To generate a report, you will need to have Nix installed on the target machine.</p> <pre><code>sudo nix run \\\n  --option experimental-features \"nix-command flakes\" \\\n  --option extra-substituters https://numtide.cachix.org \\\n  --option extra-trusted-public-keys numtide.cachix.org-1:2ps1kLBUWjxIneOy1Ik6cQjb41X0iXVXeHigGmycPPE= \\\n  github:numtide/nixos-facter -- -o facter.json\n</code></pre> <p>Note</p> <p>In the near-future we will add nixos-facter to nixpkgs. Until then, we recommend using the Numtide Binary Cache to avoid having to build everything from scratch.</p> <p>This will scan your system and produce a JSON-based report in a file named <code>facter.json</code>:</p> facter.json<pre><code>{\n  \"version\": 2, // (1)!\n  \"system\": \"x86_64-linux\", // (2)!\n  \"virtualisation\": \"none\", // (3)!\n  \"hardware\": { // (4)!\n    \"bios\": { ... },\n    \"bluetooth\": [ ... ],\n    \"bridge\": [ ... ],\n    \"chip_card\": [ ... ] ,\n    \"cpu\": [ ... ],\n    \"disk\": [ ... ],\n    \"graphics_card\": [ ... ],\n    \"hub\": [ ... ],\n    \"keyboard\": [ ... ],\n    \"memory\": [ ... ],\n    \"monitor\": [ ... ],\n    \"mouse\": [ ... ],\n    \"network_controller\": [ ... ],\n    \"network_interface\": [ ... ],\n    \"sound\": [ ... ],\n    \"storage_controller\": [ ... ],\n    \"system\": [ ... ],\n    \"unknown\": [ ... ],\n    \"usb_controller\": [ ... ]\n  },\n  \"smbios\": { // (5)!\n    \"bios\": { ... },\n    \"board\": { ... },\n    \"cache\": [ ... ],\n    \"chassis\": { ... },\n    \"config\": { ... },\n    \"language\": { ... },\n    \"memory_array\": [ ... ],\n    \"memory_array_mapped_address\": [ ... ],\n    \"memory_device\": [ ... ],\n    \"memory_device_mapped_address\": [ ... ],\n    \"memory_error\": [ ... ],\n    \"onboard\": [ ... ],\n    \"port_connector\": [ ... ],\n    \"processor\": [ ... ],\n    \"slot\": [ ... ],\n    \"system\": { ... }\n  }\n}\n</code></pre> <ol> <li>Used to track major breaking changes in the report format.</li> <li>Architecture of the target machine.</li> <li>Indicates whether the report was generated inside a virtualised environment, and if so, what type.</li> <li>All the various bits of hardware that could be detected.</li> <li>System Management BIOS information if available.</li> </ol>"},{"location":"getting-started/nixos-configuration/","title":"NixOS Configuration","text":"<p>Taking the <code>facter.json</code> file generated in the previous step, we can construct a NixOS configuration:</p> FlakeNon-Flake flake.nix<pre><code>{\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    nixos-facter-modules.url = \"github:numtide/nixos-facter-modules\";\n  };\n\n  outputs =\n    inputs@{ nixpkgs, ... }:\n    let\n        inherit (nixpkgs) lib;\n    in\n    {\n      nixosConfigurations.basic = lib.nixosSystem {\n        modules = [\n\n          # enable the NixOS Facter module\n          inputs.nixos-facter-modules.nixosModules.facter\n\n          # configure the facter report\n          { config.facter.reportPath = ./facter.json; }\n\n          # Additional modules and configuration, for example:\n          #\n          # {\n          #   users.users.root.initialPassword = \"fnord23\";\n          #   boot.loader.grub.devices = lib.mkForce [ \"/dev/sda\" ];\n          #   fileSystems.\"/\".device = lib.mkDefault \"/dev/sda\";\n          # }\n          # ...\n          # Define your bootloader if you are not using grub\n          # { boot.loader.systemd-boot.enable = true; }\n        ];\n      };\n    };\n}\n</code></pre> configuration.nix<pre><code>{ lib, ... }:\n{\n  imports = [\n    \"${\n      (builtins.fetchTarball { url = \"https://github.com/numtide/nixos-facter-modules/\"; })\n    }/modules/nixos/facter.nix\"\n  ];\n\n  # configure the facter report\n  config.facter.reportPath = ./facter.json;\n\n  # Additional modules and configuration, for example:\n  #\n  # config.users.users.root.initialPassword = \"fnord23\";\n  # config.boot.loader.grub.devices = lib.mkForce [ \"/dev/sda\" ];\n  # config.fileSystems.\"/\".device = lib.mkDefault \"/dev/sda\";\n  #\n  # ...\n  # Define your bootloader if you are not using grub\n  # config.boot.loader.systemd-boot.enable = true;\n}\n</code></pre> <p>The NixOS Facter module will attempt to do the following:</p> <ul> <li>Configure <code>nixpkgs.hostPlatform</code> based on the detected architecture.</li> <li>Enable a variety of kernel modules and NixOS options related to VM and bare-metal environments based on the detected virtualisation.</li> <li>Enable CPU microcode updates based on the detected CPU(s).</li> <li>Ensure a variety of kernel modules are made available at boot time based on the detected (usb|firewire|storage) controllers and disks.</li> <li>Enable a variety of kernel modules based on the detected Broadcom and Intel WiFi devices.</li> </ul> <p>Roadmap</p> <p>We continue to add to and improve nixos-facter-modules. Our eventual goal is to replace much if not all of the functionality currently provided by nixos-hardware and nixos-generate-config.</p>"},{"location":"reference/nixos_modules/bluetooth/","title":"Bluetooth","text":""},{"location":"reference/nixos_modules/bluetooth/#facterbluetoothenable","title":"facter.bluetooth.enable","text":"<p>Whether to enable Enable the Facter bluetooth module.</p> <p>Type: boolean</p> <p>Default: <code>false</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/bluetooth.nix</p>"},{"location":"reference/nixos_modules/boot/","title":"Boot","text":""},{"location":"reference/nixos_modules/boot/#facterbootenable","title":"facter.boot.enable","text":"<p>Whether to enable Enable the Facter Boot module.</p> <p>Type: boolean</p> <p>Default: <code>true</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/boot.nix</p>"},{"location":"reference/nixos_modules/debug/","title":"Debug","text":""},{"location":"reference/nixos_modules/debug/#facterdebugconfig","title":"facter.debug.config","text":"<p>A breakdown of the NixOS config being applied by each Facter module.</p> <p>Type: raw value</p> <p>Declared by:  - modules/nixos/facter.nix</p>"},{"location":"reference/nixos_modules/debug/#facterdebugoptions","title":"facter.debug.options","text":"<p>All of the options affected by Facter modules</p> <p>Type: raw value</p> <p>Declared by:  - modules/nixos/facter.nix</p>"},{"location":"reference/nixos_modules/facter/","title":"Facter","text":""},{"location":"reference/nixos_modules/facter/#facterreport","title":"facter.report","text":"<p>An import for the reportPath.</p> <p>Type: raw value</p> <p>Default:</p> <pre><code>{\n  hardware = {\n    bios = {\n      apm_info = {\n        bios_flags = 0;\n        enabled = false;\n        sub_version = 0;\n        supported = false;\n        version = 0;\n      };\n      lba_support = false;\n      low_memory_size = 654336;\n      pnp = true;\n      pnp_id = 0;\n      smbios_version = 520;\n      vbe_info = {\n        version = 0;\n        video_memory = 0;\n      };\n    };\n    bridge = [\n      {\n        base_class = {\n          name = \"Bridge\";\n          value = 6;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 259;\n          function = 0;\n          header_type = 0;\n          irq = 0;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 28672;\n        };\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Intel ISA bridge\";\n        module_alias = \"pci:v00008086d00007000sv00001AF4sd00001100bc06sc01i00\";\n        slot = 1;\n        sub_class = {\n          name = \"ISA bridge\";\n          value = 1;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:01.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Intel Corporation\";\n          value = 32902;\n        };\n      }\n      {\n        base_class = {\n          name = \"Bridge\";\n          value = 6;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 259;\n          function = 0;\n          header_type = 0;\n          irq = 0;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4663;\n        };\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Intel Host bridge\";\n        module_alias = \"pci:v00008086d00001237sv00001AF4sd00001100bc06sc00i00\";\n        revision = {\n          value = 2;\n        };\n        slot = 0;\n        sub_class = {\n          name = \"Host bridge\";\n          value = 0;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:00.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:00.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Intel Corporation\";\n          value = 32902;\n        };\n      }\n      {\n        base_class = {\n          name = \"Bridge\";\n          value = 6;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 259;\n          function = 3;\n          header_type = 0;\n          irq = 9;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 28947;\n        };\n        driver = \"piix4_smbus\";\n        driver_module = \"i2c_piix4\";\n        driver_modules = [\n          \"i2c_piix4\"\n        ];\n        drivers = [\n          \"piix4_smbus\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Intel Bridge\";\n        module_alias = \"pci:v00008086d00007113sv00001AF4sd00001100bc06sc80i00\";\n        resources = [\n          {\n            base = 9;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n        ];\n        revision = {\n          value = 3;\n        };\n        slot = 1;\n        sub_class = {\n          name = \"Bridge\";\n          value = 128;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:01.3\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.3\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Intel Corporation\";\n          value = 32902;\n        };\n      }\n    ];\n    cdrom = [\n      {\n        attached_to = 14;\n        base_class = {\n          name = \"Mass Storage Device\";\n          value = 262;\n        };\n        bus_type = {\n          name = \"SCSI\";\n          value = 132;\n        };\n        device = {\n          name = \"QEMU DVD-ROM\";\n          value = 0;\n        };\n        driver = \"ata_piix\";\n        driver_module = \"ata_piix\";\n        driver_modules = [\n          \"ata_piix\"\n          \"sr_mod\"\n        ];\n        drivers = [\n          \"ata_piix\"\n          \"sr\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = {\n          dvd = true;\n          mrw = true;\n          mrw_w = true;\n        };\n        model = \"QEMU DVD-ROM\";\n        pci_interface = {\n          name = \"DVD\";\n          value = 3;\n        };\n        revision = {\n          name = \"2.5+\";\n          value = 0;\n        };\n        slot = 256;\n        sub_class = {\n          name = \"CD-ROM\";\n          value = 2;\n        };\n        sysfs_bus_id = \"1:0:0:0\";\n        sysfs_device_link = \"/devices/pci0000:00/0000:00:01.1/ata2/host1/target1:0:0/1:0:0:0\";\n        sysfs_id = \"/class/block/sr0\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/sr0\";\n        unix_device_name_2 = \"/dev/sg0\";\n        unix_device_names = [\n          \"/dev/cdrom\"\n          \"/dev/disk/by-diskseq/3\"\n          \"/dev/disk/by-id/ata-QEMU_DVD-ROM_QM00003\"\n          \"/dev/disk/by-path/pci-0000:00:01.1-ata-2\"\n          \"/dev/disk/by-path/pci-0000:00:01.1-ata-2.0\"\n          \"/dev/sr0\"\n        ];\n        unix_device_number = {\n          major = 11;\n          minor = 0;\n          range = 1;\n          type = 98;\n        };\n        unix_device_number_2 = {\n          major = 21;\n          minor = 0;\n          range = 1;\n          type = 99;\n        };\n        vendor = {\n          name = \"QEMU\";\n          value = 0;\n        };\n      }\n    ];\n    cpu = [\n      {\n        address_sizes = {\n          physical = 48;\n          virtual = 48;\n        };\n        architecture = \"x86_64\";\n        bogo = 6799.99;\n        bugs = [\n          \"sysret_ss_attrs\"\n          \"spectre_v1\"\n          \"spectre_v2\"\n          \"spec_store_bypass\"\n          \"srso\"\n        ];\n        cache = 512;\n        cache_alignment = 64;\n        clflush_size = 64;\n        cores = 2;\n        cpuid_level = 16;\n        family = 25;\n        features = [\n          \"fpu\"\n          \"vme\"\n          \"de\"\n          \"pse\"\n          \"tsc\"\n          \"msr\"\n          \"pae\"\n          \"mce\"\n          \"cx8\"\n          \"apic\"\n          \"sep\"\n          \"mtrr\"\n          \"pge\"\n          \"mca\"\n          \"cmov\"\n          \"pat\"\n          \"pse36\"\n          \"clflush\"\n          \"mmx\"\n          \"fxsr\"\n          \"sse\"\n          \"sse2\"\n          \"ht\"\n          \"syscall\"\n          \"nx\"\n          \"mmxext\"\n          \"fxsr_opt\"\n          \"pdpe1gb\"\n          \"rdtscp\"\n          \"lm\"\n          \"rep_good\"\n          \"nopl\"\n          \"cpuid\"\n          \"extd_apicid\"\n          \"tsc_known_freq\"\n          \"pni\"\n          \"pclmulqdq\"\n          \"ssse3\"\n          \"fma\"\n          \"cx16\"\n          \"sse4_1\"\n          \"sse4_2\"\n          \"x2apic\"\n          \"movbe\"\n          \"popcnt\"\n          \"tsc_deadline_timer\"\n          \"aes\"\n          \"xsave\"\n          \"avx\"\n          \"f16c\"\n          \"rdrand\"\n          \"hypervisor\"\n          \"lahf_lm\"\n          \"cmp_legacy\"\n          \"svm\"\n          \"cr8_legacy\"\n          \"abm\"\n          \"sse4a\"\n          \"misalignsse\"\n          \"3dnowprefetch\"\n          \"osvw\"\n          \"perfctr_core\"\n          \"ssbd\"\n          \"ibrs\"\n          \"ibpb\"\n          \"stibp\"\n          \"vmmcall\"\n          \"fsgsbase\"\n          \"tsc_adjust\"\n          \"bmi1\"\n          \"avx2\"\n          \"smep\"\n          \"bmi2\"\n          \"erms\"\n          \"invpcid\"\n          \"rdseed\"\n          \"adx\"\n          \"smap\"\n          \"clflushopt\"\n          \"clwb\"\n          \"sha_ni\"\n          \"xsaveopt\"\n          \"xsavec\"\n          \"xgetbv1\"\n          \"xsaves\"\n          \"clzero\"\n          \"xsaveerptr\"\n          \"wbnoinvd\"\n          \"arat\"\n          \"npt\"\n          \"lbrv\"\n          \"nrip_save\"\n          \"tsc_scale\"\n          \"vmcb_clean\"\n          \"pausefilter\"\n          \"pfthreshold\"\n          \"v_vmsave_vmload\"\n          \"vgif\"\n          \"umip\"\n          \"pku\"\n          \"ospke\"\n          \"vaes\"\n          \"vpclmulqdq\"\n          \"rdpid\"\n          \"fsrm\"\n          \"arch_capabilities\"\n        ];\n        fpu = true;\n        fpu_exception = true;\n        model = 33;\n        physical_id = 0;\n        siblings = 2;\n        stepping = 0;\n        tlb_size = 1024;\n        units = 2;\n        vendor_name = \"AuthenticAMD\";\n        write_protect = false;\n      }\n    ];\n    disk = [\n      {\n        base_class = {\n          name = \"Mass Storage Device\";\n          value = 262;\n        };\n        driver = \"floppy\";\n        driver_module = \"floppy\";\n        driver_modules = [\n          \"floppy\"\n        ];\n        drivers = [\n          \"floppy\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = {\n          not_ready = true;\n        };\n        model = \"Disk\";\n        resources = [\n          {\n            type = \"size\";\n            unit = \"sectors\";\n            value_1 = 8;\n            value_2 = 512;\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"Disk\";\n          value = 0;\n        };\n        sysfs_bus_id = \"floppy.0\";\n        sysfs_device_link = \"/devices/platform/floppy.0\";\n        sysfs_id = \"/class/block/fd0\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/fd0\";\n        unix_device_names = [\n          \"/dev/fd0\"\n        ];\n        unix_device_number = {\n          major = 2;\n          minor = 0;\n          range = 1;\n          type = 98;\n        };\n      }\n      {\n        attached_to = 21;\n        base_class = {\n          name = \"Mass Storage Device\";\n          value = 262;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_blk\"\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n          \"virtio_blk\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Disk\";\n        resources = [\n          {\n            cylinders = 20805;\n            geo_type = \"logical\";\n            heads = 16;\n            sectors = 63;\n            size = 0;\n            type = \"disk_geo\";\n          }\n          {\n            type = \"size\";\n            unit = \"sectors\";\n            value_1 = 20971520;\n            value_2 = 512;\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"Disk\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio6\";\n        sysfs_device_link = \"/devices/pci0000:00/0000:00:09.0/virtio6\";\n        sysfs_id = \"/class/block/vda\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/vda\";\n        unix_device_names = [\n          \"/dev/disk/by-diskseq/1\"\n          \"/dev/disk/by-id/virtio-root\"\n          \"/dev/disk/by-label/nixos\"\n          \"/dev/disk/by-path/pci-0000:00:09.0\"\n          \"/dev/disk/by-path/virtio-pci-0000:00:09.0\"\n          \"/dev/disk/by-uuid/d907ce0d-0d9b-446f-8f2e-6b0bd67873f1\"\n          \"/dev/vda\"\n        ];\n        unix_device_number = {\n          major = 253;\n          minor = 0;\n          range = 16;\n          type = 98;\n        };\n      }\n    ];\n    graphics_card = [\n      {\n        base_class = {\n          name = \"Display controller\";\n          value = 3;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 259;\n          function = 0;\n          header_type = 0;\n          irq = 0;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4369;\n        };\n        driver = \"bochs-drm\";\n        driver_module = \"bochs\";\n        driver_modules = [\n          \"bochs\"\n        ];\n        drivers = [\n          \"bochs-drm\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"VGA compatible controller\";\n        module_alias = \"pci:v00001234d00001111sv00001AF4sd00001100bc03sc00i00\";\n        pci_interface = {\n          name = \"VGA\";\n          value = 0;\n        };\n        resources = [\n          {\n            access = \"read_only\";\n            base = 4244635648;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16777216;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273799168;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 786432;\n            enabled = false;\n            prefetch = \"no\";\n            range = 131072;\n            type = \"mem\";\n          }\n        ];\n        revision = {\n          value = 2;\n        };\n        slot = 2;\n        sub_class = {\n          name = \"VGA compatible controller\";\n          value = 0;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:02.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:02.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 4660;\n        };\n      }\n    ];\n    hub = [\n      {\n        attached_to = 7;\n        base_class = {\n          name = \"Hub\";\n          value = 266;\n        };\n        bus_type = {\n          name = \"USB\";\n          value = 134;\n        };\n        detail = {\n          bus = 0;\n          connections = 0;\n          count = 0;\n          country = 0;\n          device_class = \"hub\";\n          device_number = 0;\n          interface_class = \"hub\";\n          interface_descriptor = 0;\n          lev = 0;\n          manufacturer = \"Linux 6.6.48 uhci_hcd\";\n          parent = 0;\n          port = 0;\n          product = \"UHCI Host Controller\";\n          speed = 12000000;\n          used_connections = 0;\n        };\n        device = {\n          name = \"UHCI Host Controller\";\n          value = 1;\n        };\n        driver = \"hub\";\n        drivers = [\n          \"hub\"\n        ];\n        hotplug = \"usb\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Linux 6.6.48 uhci_hcd UHCI Host Controller\";\n        module_alias = \"usb:v1D6Bp0001d0606dc09dsc00dp00ic09isc00ip00in00\";\n        resources = [\n          {\n            bits = 0;\n            handshake = 0;\n            parity = 0;\n            speed = 12000000;\n            stop_bits = 0;\n            type = \"baud\";\n          }\n        ];\n        revision = {\n          name = \"6.06\";\n          value = 0;\n        };\n        slot = 0;\n        sysfs_bus_id = \"1-0:1.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.2/usb1/1-0:1.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Linux 6.6.48 uhci_hcd\";\n          value = 7531;\n        };\n      }\n    ];\n    memory = [\n      null\n    ];\n    monitor = [\n      {\n        attached_to = 17;\n        base_class = {\n          name = \"Monitor\";\n          value = 256;\n        };\n        detail = {\n          clock = 107300;\n          height = 800;\n          height_millimetres = 203;\n          horizontal_flag = 45;\n          horizontal_sync = {\n            max = 160;\n            min = 30;\n          };\n          horizontal_sync_timings = {\n            disp = 1280;\n            sync_end = 1638;\n            sync_start = 1600;\n            total = 1728;\n          };\n          manufacture_week = 42;\n          manufacture_year = 2014;\n          name = \"QEMU Monitor\";\n          vendor = \"\";\n          vertical_flag = 45;\n          vertical_sync = {\n            max = 125;\n            min = 50;\n          };\n          vertical_sync_timings = {\n            disp = 800;\n            sync_end = 808;\n            sync_start = 804;\n            total = 828;\n          };\n          width = 1280;\n          width_millimetres = 325;\n        };\n        device = {\n          name = \"QEMU Monitor\";\n          value = 4660;\n        };\n        driver_info = {\n          bandwidth = 0;\n          height = 1152;\n          horizontal_flag = 45;\n          horizontal_sync = {\n            max = 160;\n            min = 30;\n          };\n          horizontal_sync_timings = {\n            disp = 1280;\n            sync_end = 1638;\n            sync_start = 1600;\n            total = 1728;\n          };\n          type = \"display\";\n          vertical_flag = 45;\n          vertical_sync = {\n            max = 125;\n            min = 50;\n          };\n          vertical_sync_timings = {\n            disp = 800;\n            sync_end = 808;\n            sync_start = 804;\n            total = 828;\n          };\n          width = 2048;\n        };\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"QEMU Monitor\";\n        resources = [\n          {\n            height = 768;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 1024;\n          }\n          {\n            height = 800;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 1280;\n          }\n          {\n            height = 1200;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 1600;\n          }\n          {\n            height = 1080;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 1920;\n          }\n          {\n            height = 1152;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 2048;\n          }\n          {\n            height = 480;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 640;\n          }\n          {\n            height = 600;\n            interlaced = false;\n            type = \"monitor\";\n            vertical_frequency = 60;\n            width = 800;\n          }\n          {\n            type = \"size\";\n            unit = \"mm\";\n            value_1 = 325;\n            value_2 = 203;\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"LCD Monitor\";\n          value = 2;\n        };\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 18708;\n        };\n      }\n    ];\n    mouse = [\n      {\n        attached_to = 33;\n        base_class = {\n          name = \"Mouse\";\n          value = 261;\n        };\n        bus_type = {\n          name = \"USB\";\n          value = 134;\n        };\n        compat_device = \"Generic USB Mouse\";\n        compat_vendor = \"Unknown\";\n        detail = {\n          bus = 0;\n          connections = 0;\n          count = 0;\n          country = 0;\n          device_number = 0;\n          interface_class = \"hid\";\n          interface_descriptor = 0;\n          lev = 0;\n          manufacturer = \"QEMU\";\n          parent = 0;\n          port = 0;\n          product = \"QEMU USB Tablet\";\n          speed = 12000000;\n          used_connections = 0;\n        };\n        device = {\n          name = \"QEMU USB Tablet\";\n          value = 1;\n        };\n        driver = \"usbhid\";\n        driver_info = {\n          buttons = -1;\n          db_entry_0 = [\n            \"explorerps/2\"\n            \"exps2\"\n          ];\n          gpm = \"exps2\";\n          type = \"mouse\";\n          wheels = -1;\n          xf86 = \"explorerps/2\";\n        };\n        driver_module = \"usbhid\";\n        driver_modules = [\n          \"usbhid\"\n        ];\n        drivers = [\n          \"usbhid\"\n        ];\n        hotplug = \"usb\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"QEMU USB Tablet\";\n        module_alias = \"usb:v0627p0001d0000dc00dsc00dp00ic03isc00ip00in00\";\n        resources = [\n          {\n            bits = 0;\n            handshake = 0;\n            parity = 0;\n            speed = 12000000;\n            stop_bits = 0;\n            type = \"baud\";\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"USB Mouse\";\n          value = 3;\n        };\n        sysfs_bus_id = \"1-1:1.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.2/usb1/1-1/1-1:1.0\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/input/mice\";\n        unix_device_name_2 = \"/dev/input/mouse0\";\n        unix_device_names = [\n          \"/dev/input/mice\"\n        ];\n        unix_device_number = {\n          major = 13;\n          minor = 63;\n          range = 1;\n          type = 99;\n        };\n        unix_device_number_2 = {\n          major = 13;\n          minor = 32;\n          range = 1;\n          type = 99;\n        };\n        vendor = {\n          name = \"QEMU\";\n          value = 1575;\n        };\n      }\n    ];\n    network_controller = [\n      {\n        attached_to = 13;\n        base_class = {\n          name = \"Network controller\";\n          value = 2;\n        };\n        bus_type = {\n          name = \"Virtio\";\n          value = 143;\n        };\n        device = \"Ethernet Card 0\";\n        driver = \"virtio_net\";\n        driver_module = \"virtio_net\";\n        driver_modules = [\n          \"virtio_net\"\n        ];\n        drivers = [\n          \"virtio_net\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Ethernet Card 0\";\n        module_alias = \"virtio:d00000001v00001AF4\";\n        resources = [\n          {\n            address = 53;\n            type = \"hwaddr\";\n          }\n          {\n            address = 53;\n            type = \"phwaddr\";\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"Ethernet controller\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:03.0/virtio0\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"eth0\";\n        unix_device_names = [\n          \"eth0\"\n        ];\n        vendor = \"Virtio\";\n      }\n    ];\n    network_interface = [\n      {\n        base_class = {\n          name = \"Network Interface\";\n          value = 263;\n        };\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Loopback network interface\";\n        slot = 0;\n        sub_class = {\n          name = \"Loopback\";\n          value = 0;\n        };\n        sysfs_id = \"/class/net/lo\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"lo\";\n        unix_device_names = [\n          \"lo\"\n        ];\n      }\n      {\n        attached_to = 24;\n        base_class = {\n          name = \"Network Interface\";\n          value = 263;\n        };\n        driver = \"virtio_net\";\n        driver_module = \"virtio_net\";\n        driver_modules = [\n          \"virtio_net\"\n        ];\n        drivers = [\n          \"virtio_net\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Ethernet network interface\";\n        resources = [\n          {\n            address = 53;\n            type = \"hwaddr\";\n          }\n          {\n            address = 53;\n            type = \"phwaddr\";\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"Ethernet\";\n          value = 1;\n        };\n        sysfs_device_link = \"/devices/pci0000:00/0000:00:03.0/virtio0\";\n        sysfs_id = \"/class/net/eth0\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"eth0\";\n        unix_device_names = [\n          \"eth0\"\n        ];\n      }\n    ];\n    storage_controller = [\n      {\n        base_class = {\n          name = \"Mass storage controller\";\n          value = 1;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 263;\n          function = 1;\n          header_type = 0;\n          irq = 0;\n          prog_if = 128;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 28688;\n        };\n        driver = \"ata_piix\";\n        driver_module = \"ata_piix\";\n        driver_modules = [\n          \"ata_piix\"\n        ];\n        drivers = [\n          \"ata_piix\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Intel IDE interface\";\n        module_alias = \"pci:v00008086d00007010sv00001AF4sd00001100bc01sc01i80\";\n        pci_interface = {\n          value = 128;\n        };\n        resources = [\n          {\n            access = \"read_write\";\n            base = 1014;\n            enabled = true;\n            range = 1;\n            type = \"io\";\n          }\n          {\n            access = \"read_write\";\n            base = 368;\n            enabled = true;\n            range = 8;\n            type = \"io\";\n          }\n          {\n            access = \"read_write\";\n            base = 49536;\n            enabled = true;\n            range = 16;\n            type = \"io\";\n          }\n          {\n            access = \"read_write\";\n            base = 496;\n            enabled = true;\n            range = 8;\n            type = \"io\";\n          }\n          {\n            access = \"read_write\";\n            base = 886;\n            enabled = true;\n            range = 1;\n            type = \"io\";\n          }\n        ];\n        slot = 1;\n        sub_class = {\n          name = \"IDE interface\";\n          value = 1;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:01.1\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.1\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Intel Corporation\";\n          value = 32902;\n        };\n      }\n      {\n        attached_to = 16;\n        base_class = {\n          name = \"Mass storage controller\";\n          value = 1;\n        };\n        bus_type = {\n          name = \"Virtio\";\n          value = 143;\n        };\n        device = \"Storage 0\";\n        driver = \"virtio_blk\";\n        driver_module = \"virtio_blk\";\n        driver_modules = [\n          \"virtio_blk\"\n        ];\n        drivers = [\n          \"virtio_blk\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Storage 0\";\n        module_alias = \"virtio:d00000002v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Storage controller\";\n          value = 128;\n        };\n        sysfs_bus_id = \"virtio6\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:09.0/virtio6\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n    ];\n    system = {\n      form_factor = \"desktop\";\n    };\n    unknown = [\n      {\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 11;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4105;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Unclassified device\";\n        module_alias = \"pci:v00001AF4d00001009sv00001AF4sd00000009bc00sc02i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49504;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 11;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261494784;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273823744;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 8;\n        sub_class = {\n          value = 2;\n        };\n        sub_device = {\n          value = 9;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:08.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:08.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 11;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4101;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Unclassified device\";\n        module_alias = \"pci:v00001AF4d00001005sv00001AF4sd00000004bc00scFFi00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49408;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 11;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261429248;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273807360;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 4;\n        sub_class = {\n          value = 255;\n        };\n        sub_device = {\n          value = 4;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:04.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:04.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 10;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4105;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Unclassified device\";\n        module_alias = \"pci:v00001AF4d00001009sv00001AF4sd00000009bc00sc02i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49472;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 10;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261478400;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273819648;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 7;\n        sub_class = {\n          value = 2;\n        };\n        sub_device = {\n          value = 9;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:07.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:07.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Network controller\";\n          value = 2;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 10;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4096;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Ethernet controller\";\n        module_alias = \"pci:v00001AF4d00001000sv00001AF4sd00000001bc02sc00i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49376;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 10;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261412864;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_only\";\n            base = 4273471488;\n            enabled = false;\n            prefetch = \"no\";\n            range = 262144;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273803264;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 3;\n        sub_class = {\n          name = \"Ethernet controller\";\n          value = 0;\n        };\n        sub_device = {\n          value = 1;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:03.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:03.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 11;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4105;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Unclassified device\";\n        module_alias = \"pci:v00001AF4d00001009sv00001AF4sd00000009bc00sc02i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49280;\n            enabled = true;\n            range = 64;\n            type = \"io\";\n          }\n          {\n            base = 11;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261462016;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273815552;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 6;\n        sub_class = {\n          value = 2;\n        };\n        sub_device = {\n          value = 9;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:06.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:06.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Mass storage controller\";\n          value = 1;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 10;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4097;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"SCSI storage controller\";\n        module_alias = \"pci:v00001AF4d00001001sv00001AF4sd00000002bc01sc00i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49152;\n            enabled = true;\n            range = 128;\n            type = \"io\";\n          }\n          {\n            base = 10;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261511168;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273827840;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 9;\n        sub_class = {\n          name = \"SCSI storage controller\";\n          value = 0;\n        };\n        sub_device = {\n          value = 2;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:09.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:09.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 10;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4105;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Unclassified device\";\n        module_alias = \"pci:v00001AF4d00001009sv00001AF4sd00000009bc00sc02i00\";\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49440;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 10;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261445632;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273811456;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        slot = 5;\n        sub_class = {\n          value = 2;\n        };\n        sub_device = {\n          value = 9;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:05.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:05.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        base_class = {\n          name = \"Input device controller\";\n          value = 9;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 1287;\n          function = 0;\n          header_type = 0;\n          irq = 11;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 4178;\n        };\n        driver = \"virtio-pci\";\n        driver_module = \"virtio_pci\";\n        driver_modules = [\n          \"virtio_pci\"\n        ];\n        drivers = [\n          \"virtio-pci\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Keyboard controller\";\n        module_alias = \"pci:v00001AF4d00001052sv00001AF4sd00001100bc09sc00i00\";\n        resources = [\n          {\n            base = 11;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n          {\n            access = \"read_only\";\n            base = 4261527552;\n            enabled = true;\n            prefetch = \"no\";\n            range = 16384;\n            type = \"mem\";\n          }\n          {\n            access = \"read_write\";\n            base = 4273831936;\n            enabled = true;\n            prefetch = \"no\";\n            range = 4096;\n            type = \"mem\";\n          }\n        ];\n        revision = {\n          value = 1;\n        };\n        slot = 10;\n        sub_class = {\n          name = \"Keyboard controller\";\n          value = 0;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:0a.0\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:0a.0\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          value = 6900;\n        };\n      }\n      {\n        attached_to = 9;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"virtio_rng\";\n        driver_module = \"virtio_rng\";\n        driver_modules = [\n          \"virtio_rng\"\n        ];\n        drivers = [\n          \"virtio_rng\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000004v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio1\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:04.0/virtio1\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n      {\n        attached_to = 10;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"9pnet_virtio\";\n        driver_module = \"9pnet_virtio\";\n        driver_modules = [\n          \"9pnet_virtio\"\n        ];\n        drivers = [\n          \"9pnet_virtio\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000009v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio4\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:07.0/virtio4\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n      {\n        attached_to = 18;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"9pnet_virtio\";\n        driver_module = \"9pnet_virtio\";\n        driver_modules = [\n          \"9pnet_virtio\"\n        ];\n        drivers = [\n          \"9pnet_virtio\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000009v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio2\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:05.0/virtio2\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n      {\n        attached_to = 19;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"virtio_input\";\n        driver_module = \"virtio_input\";\n        driver_modules = [\n          \"virtio_input\"\n        ];\n        drivers = [\n          \"virtio_input\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000012v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio7\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:0a.0/virtio7\";\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/input/event3\";\n        unix_device_names = [\n          \"/dev/input/by-path/pci-0000:00:0a.0-event-kbd\"\n          \"/dev/input/event3\"\n        ];\n        unix_device_number = {\n          major = 13;\n          minor = 67;\n          range = 1;\n          type = 99;\n        };\n        vendor = \"Virtio\";\n      }\n      {\n        attached_to = 6;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"9pnet_virtio\";\n        driver_module = \"9pnet_virtio\";\n        driver_modules = [\n          \"9pnet_virtio\"\n        ];\n        drivers = [\n          \"9pnet_virtio\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000009v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio5\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:08.0/virtio5\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n      {\n        attached_to = 15;\n        base_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        device = \"\";\n        driver = \"9pnet_virtio\";\n        driver_module = \"9pnet_virtio\";\n        driver_modules = [\n          \"9pnet_virtio\"\n        ];\n        drivers = [\n          \"9pnet_virtio\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Virtio Unclassified device\";\n        module_alias = \"virtio:d00000009v00001AF4\";\n        slot = 0;\n        sub_class = {\n          name = \"Unclassified device\";\n          value = 0;\n        };\n        sysfs_bus_id = \"virtio3\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:06.0/virtio3\";\n        sysfs_iommu_group_id = 0;\n        vendor = \"Virtio\";\n      }\n      {\n        base_class = {\n          name = \"Communication controller\";\n          value = 7;\n        };\n        device = {\n          name = \"16550A\";\n          value = 0;\n        };\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"16550A\";\n        pci_interface = {\n          name = \"16550\";\n          value = 2;\n        };\n        resources = [\n          {\n            access = \"read_write\";\n            base = 1016;\n            enabled = true;\n            range = 0;\n            type = \"io\";\n          }\n          {\n            base = 4;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n        ];\n        slot = 0;\n        sub_class = {\n          name = \"Serial controller\";\n          value = 0;\n        };\n        sysfs_iommu_group_id = 0;\n        unix_device_name = \"/dev/ttyS0\";\n        unix_device_names = [\n          \"/dev/ttyS0\"\n        ];\n      }\n    ];\n    usb_controller = [\n      {\n        base_class = {\n          name = \"Serial bus controller\";\n          value = 12;\n        };\n        bus_type = {\n          name = \"PCI\";\n          value = 4;\n        };\n        detail = {\n          command = 263;\n          function = 2;\n          header_type = 0;\n          irq = 11;\n          prog_if = 0;\n          secondary_bus = 0;\n        };\n        device = {\n          value = 28704;\n        };\n        driver = \"uhci_hcd\";\n        driver_info = {\n          active = true;\n          conf = \"\";\n          db_entry_0 = [\n            \"uhci-hcd\"\n          ];\n          modprobe = true;\n          module_args = [\n            \"\"\n          ];\n          names = [\n            \"uhci-hcd\"\n          ];\n          type = \"module\";\n        };\n        driver_module = \"uhci_hcd\";\n        driver_modules = [\n          \"uhci_hcd\"\n        ];\n        drivers = [\n          \"uhci_hcd\"\n        ];\n        hotplug = \"none\";\n        hotplug_slot = 0;\n        is = { };\n        model = \"Intel USB Controller\";\n        module_alias = \"pci:v00008086d00007020sv00001AF4sd00001100bc0Csc03i00\";\n        pci_interface = {\n          name = \"UHCI\";\n          value = 0;\n        };\n        resources = [\n          {\n            access = \"read_write\";\n            base = 49344;\n            enabled = true;\n            range = 32;\n            type = \"io\";\n          }\n          {\n            base = 11;\n            enabled = true;\n            triggered = 0;\n            type = \"irq\";\n          }\n        ];\n        revision = {\n          value = 1;\n        };\n        slot = 1;\n        sub_class = {\n          name = \"USB Controller\";\n          value = 3;\n        };\n        sub_device = {\n          value = 4352;\n        };\n        sub_vendor = {\n          value = 6900;\n        };\n        sysfs_bus_id = \"0000:00:01.2\";\n        sysfs_id = \"/devices/pci0000:00/0000:00:01.2\";\n        sysfs_iommu_group_id = 0;\n        vendor = {\n          name = \"Intel Corporation\";\n          value = 32902;\n        };\n      }\n    ];\n  };\n  smbios = {\n    bios = {\n      date = \"04/01/2014\";\n      features = null;\n      handle = 0;\n      rom_size = 65536;\n      start_address = \"0xe8000\";\n      vendor = \"SeaBIOS\";\n      version = \"rel-1.16.3-0-ga6ed6b701f0a-prebuilt.qemu.org\";\n    };\n    chassis = {\n      bootup_state = {\n        name = \"Safe\";\n        value = 3;\n      };\n      chassis_type = {\n        name = \"Other\";\n        value = 1;\n      };\n      handle = 768;\n      lock_present = false;\n      manufacturer = \"QEMU\";\n      oem = \"0x0\";\n      power_state = {\n        name = \"Safe\";\n        value = 3;\n      };\n      security_state = {\n        name = \"Unknown\";\n        value = 2;\n      };\n      thermal_state = {\n        name = \"Safe\";\n        value = 3;\n      };\n      version = \"pc-i440fx-9.0\";\n    };\n    memory_array = [\n      {\n        ecc = {\n          name = \"Multi-bit\";\n          value = 6;\n        };\n        error_handle = 65534;\n        handle = 4096;\n        location = {\n          name = \"Other\";\n          value = 1;\n        };\n        max_size = 2097152;\n        slots = 1;\n        usage = {\n          name = \"System memory\";\n          value = 3;\n        };\n      }\n    ];\n    memory_array_mapped_address = [\n      {\n        array_handle = 4096;\n        end_address = 2147483648;\n        handle = 4864;\n        part_width = 1;\n        start_address = 0;\n      }\n    ];\n    memory_device = [\n      {\n        array_handle = 4096;\n        bank_location = \"\";\n        ecc_bits = 0;\n        error_handle = 65534;\n        form_factor = {\n          name = \"DIMM\";\n          value = 9;\n        };\n        handle = 4352;\n        location = \"DIMM 0\";\n        manufacturer = \"QEMU\";\n        memory_type = {\n          name = \"RAM\";\n          value = 7;\n        };\n        memory_type_details = [\n          \"Other\"\n        ];\n        part_number = \"\";\n        set = 0;\n        size = 2097152;\n        speed = 0;\n        width = 0;\n      }\n    ];\n    processor = [\n      {\n        cache_handle_l1 = 0;\n        cache_handle_l2 = 0;\n        cache_handle_l3 = 0;\n        clock_ext = 0;\n        clock_max = 2000;\n        handle = 1024;\n        manufacturer = \"QEMU\";\n        part = \"\";\n        processor_family = {\n          name = \"Other\";\n          value = 254;\n        };\n        processor_status = {\n          name = \"Enabled\";\n          value = 1;\n        };\n        processor_type = {\n          name = \"CPU\";\n          value = 3;\n        };\n        socket = \"CPU 0\";\n        socket_populated = true;\n        socket_type = {\n          name = \"Other\";\n          value = 1;\n        };\n        version = \"pc-i440fx-9.0\";\n      }\n    ];\n    system = {\n      handle = 256;\n      manufacturer = \"QEMU\";\n      product = \"Standard PC (i440FX + PIIX, 1996)\";\n      version = \"pc-i440fx-9.0\";\n      wake_up = {\n        name = \"Power Switch\";\n        value = 6;\n      };\n    };\n  };\n  system = \"x86_64-linux\";\n  version = 2;\n  virtualisation = \"kvm\";\n}\n</code></pre> <p>Declared by:  - modules/nixos/facter.nix</p>"},{"location":"reference/nixos_modules/facter/#facterreportpath","title":"facter.reportPath","text":"<p>Path to a report generated by nixos-facter.</p> <p>Type: path</p> <p>Declared by:  - modules/nixos/facter.nix</p>"},{"location":"reference/nixos_modules/networking/","title":"Networking","text":""},{"location":"reference/nixos_modules/networking/#facternetworkingbroadcomfull_macenable","title":"facter.networking.broadcom.full_mac.enable","text":"<p>Whether to enable Enable the Facter Broadcom Full MAC module.</p> <p>Type: boolean</p> <p>Default: <code>\"hardware dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/networking/broadcom.nix</p>"},{"location":"reference/nixos_modules/networking/#facternetworkingbroadcomstaenable","title":"facter.networking.broadcom.sta.enable","text":"<p>Whether to enable Enable the Facter Broadcom STA module.</p> <p>Type: boolean</p> <p>Default: <code>\"hardware dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/networking/broadcom.nix</p>"},{"location":"reference/nixos_modules/networking/#facternetworkingintel_2200bgenable","title":"facter.networking.intel._2200BG.enable","text":"<p>Whether to enable Enable the Facter Intel 2200BG module.</p> <p>Type: boolean</p> <p>Default: <code>\"hardware dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/networking/intel.nix</p>"},{"location":"reference/nixos_modules/networking/#facternetworkingintel_3945abgenable","title":"facter.networking.intel._3945ABG.enable","text":"<p>Whether to enable Enable the Facter Intel 3945ABG module.</p> <p>Type: boolean</p> <p>Default: <code>\"hardware dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/networking/intel.nix</p>"},{"location":"reference/nixos_modules/virtualisation/","title":"Virtualisation","text":""},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationhypervenable","title":"facter.virtualisation.hyperv.enable","text":"<p>Whether to enable Enable the Facter Virtualisation Hyper-V module.</p> <p>Type: boolean</p> <p>Default: <code>\"environment dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationnoneenable","title":"facter.virtualisation.none.enable","text":"<p>Whether to enable Enable the Facter Virtualisation None module.</p> <p>Type: boolean</p> <p>Default: <code>\"environment dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationoracleenable","title":"facter.virtualisation.oracle.enable","text":"<p>Whether to enable Enable the Facter Virtualisation Oracle module.</p> <p>Type: boolean</p> <p>Default: <code>\"environment dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationparallelsenable","title":"facter.virtualisation.parallels.enable","text":"<p>Whether to enable Enable the Facter Virtualisation Parallels module.</p> <p>Type: boolean</p> <p>Default: <code>\"environment dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationqemuenable","title":"facter.virtualisation.qemu.enable","text":"<p>Whether to enable Enable the Facter Virtualisation Qemu module.</p> <p>Type: boolean</p> <p>Default: <code>\"environment dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"},{"location":"reference/nixos_modules/virtualisation/#factervirtualisationvirtio_scsienable","title":"facter.virtualisation.virtio_scsi.enable","text":"<p>Whether to enable Enable the Facter Virtualisation Virtio SCSI module.</p> <p>Type: boolean</p> <p>Default: <code>\"hardware dependent\"</code></p> <p>Example: <code>true</code></p> <p>Declared by:  - modules/nixos/virtualisation.nix</p>"}]}